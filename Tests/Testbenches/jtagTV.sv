/*
    Automatically generated by Fault
    Do not modify.
    Generated on: 2020-06-02 10:34:50
*/
`include "Tech/osu035/osu035_stdcells.v"
`include "Netlists/s27.netlist.v.chained.v.jtag.v.intermediate.v"

module testbench;
    reg[0:0] \G3 ;
    reg[0:0] \G2 ;
    wire[0:0] \tdo ;
    wire[0:0] \G17 ;
    reg[0:0] \tdi ;
    reg[0:0] \tck ;
    reg[0:0] \G0 ;
    reg[0:0] \CK ;
    reg[0:0] \trst ;
    reg[0:0] \reset ;
    reg[0:0] \tms ;
    reg[0:0] \G1 ;
    reg[0:0] \VDD ;
    reg[0:0] \GND ;

    
    always #1 CK = ~CK;
    always #1 tck = ~tck;

    s27 uut(
        .\G3 ( \G3 ) , .\G2 ( \G2 ) , .\tdo ( \tdo ) , .\G17 ( \G17 ) , .\tdi ( \tdi ) , .\tck ( \tck ) , .\G0 ( \G0 ) , .\CK ( \CK ) , .\trst ( \trst ) , .\reset ( \reset ) , .\tms ( \tms ) , .\G1 ( \G1 ) , .\VDD ( \VDD ) , .\GND ( \GND ) 
    );

    integer i;
    wire[3:0] scanIn = 4'b 0100;
    wire[3:0] samplePreload = 4'b 0001;

    reg[7:0] tmsPattern = 8'b 01100110;
    reg [8:0] vectors [0:1];
    reg [2:0] serialOutput[0:1];
    reg [2:0] scanInSerial;

    initial begin
        $dumpfile("dut.vcd"); // DEBUG
        $dumpvars(0, testbench);
        
        vectors[0] = 9'b 100100100;
        vectors[1] = 9'b 100100100;
    
        serialOutput[0] = 3'b 100;
        serialOutput[1] = 3'b 100;
        
        \GND = 0 ;
        \VDD = 0 ;
        \CK = 0 ;
        \reset = 1 ;
        \G0 = 0 ;
        \G1 = 0 ;
        \G2 = 0 ;
        \G3 = 0 ;
        \tms = 1 ;
        \tck = 0 ;
        \tdi = 0 ;
        \trst = 0 ;

        #10;
        reset = ~reset;
        trst = 1;        
        #2;

        test(vectors[0], serialOutput[0]);

        $display("SUCCESS_STRING");
        $finish;
    end

    task test;
        input [8:0] vector;
        input [2:0] goldenOutput;

        begin
            
            \GND = vector[8] ;
            \VDD = vector[7] ;
            \G0 = vector[6] ;
            \G1 = vector[5] ;
            \G2 = vector[4] ;
            \G3 = vector[3] ;

            shiftIR(scanIn);
            enterShiftDR();
            for (i = 0; i < 3; i = i + 1) begin
                tdi = vector[i];
                #2;
            end
              
            for (i = 0; i < 3; i = i + 1) begin
                scanInSerial[i] = tdo;
                if(i == 2) begin
                    exitDR();
                end
                #2;
            end

            if(scanInSerial != goldenOutput) begin
                $error("EXECUTING_SCANIN_INST_FAILED");
                $finish;
            end
        end
    endtask
    task shiftIR;
    input[3:0] instruction;
    integer i;
        begin
            $display("INSIDE TASK");
            for (i = 0; i< 5; i = i + 1) begin
                tms = tmsPattern[i];
                #2;
            end

            // At shift-IR: shift new instruction on tdi line
            for (i = 0; i < 4; i = i + 1) begin
                tdi = instruction[i];
                if(i == 3) begin
                    tms = tmsPattern[5];     // exit-ir
                end
                #2;
            end

            tms = tmsPattern[6];     // update-ir 
            #2;
            tms = tmsPattern[7];     // run test-idle
            #6;
        end
    endtask
    
    task enterShiftDR;
        begin
            tms = 1;     // select DR
            #2;
            tms = 0;     // capture DR -- shift DR
            #4;
        end
    endtask

    task exitDR;
        begin
            tms = 1;     // Exit DR -- update DR
            #4;
            tms = 0;     // Run test-idle
            #2;
        end
    endtask

endmodule
