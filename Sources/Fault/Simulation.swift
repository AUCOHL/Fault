import Foundation
import Defile

class Simulation {
    static func run(
        for module: String,
        in file: String,
        with cells: String,
        ports: [String: Port],
        inputs: [Port],
        at faultPoint: String,
        stuckAt: Int,
        tvAttempts: Int = 20
    ) -> [String: UInt]? {
        let dateFormatter = DateFormatter()
        dateFormatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        let date = Date()
        let dateString = dateFormatter.string(from: date)

        var portWires = ""
        var portHooks = ""

        for (name, port) in ports {
            portWires += "    \(port.polarity == .input ? "reg" : "wire")[\(port.to):\(port.from)] \(name) ;\n"
            portHooks += ".\(name) ( \(name) ) , "
        }

        let folderName = "faultTest\(UInt16.random(in: 0..<UInt16.max))"
        let _ = "mkdir -p \(folderName)".sh()

        var finalVector: [String: UInt]? = nil

        // in loop?
        for _ in 0..<tvAttempts {
            var inputAssignment = ""

            var vector = [String: UInt]()
            for input in inputs {
                let num = UInt.random(in: 0...UInt.max)
                let mask: UInt = (2 << (UInt(input.width) - 1)) - 1
                let trueNum = num & mask
                vector[input.name] = trueNum
                inputAssignment += "        \(input.name) = \(trueNum) ;\n"
            }

            let vcdName = "\(folderName)/dump.vcd";
            let vcdGMName = "\(folderName)/dumpGM.vcd";

            let bench = """
            /*
                Automatically generated by Fault
                Do not modify.
                Generated on: \(dateString)
            */

            `include "\(cells)"
            `include "\(file)"

            module FaultTestbench;

            \(portWires)

                \(module) uut(
                    \(portHooks.dropLast(2))
                );
                
                `ifdef FAULT_WITH
                initial force uut.\(faultPoint) = \(stuckAt) ;
                `endif

                initial begin
                    $dumpfile("\(vcdName)");
                    $dumpvars(0, FaultTestbench);
            \(inputAssignment)
                    #100;
                    $finish;
                end

            endmodule
            """;

            let tbName = "\(folderName)/tb.sv"
            File.open(tbName, mode: .write) {
                try! $0.print(bench)
            }

            let aoutName = "\(folderName)/a.out"

            // Test GM
            let iverilogGMResult = "iverilog -Ttyp -o \(aoutName) \(tbName) 2>&1 > /dev/null".sh()
            if iverilogGMResult != EX_OK {
                exit(Int32(iverilogGMResult))
            }
            let vvpGMResult = "vvp \(aoutName) > /dev/null".sh()
            if vvpGMResult != EX_OK {
                exit(Int32(vvpGMResult))
            }

            let _ = "mv '\(vcdName)' '\(vcdGMName)'".sh()

            let iverilogResult = "iverilog -Ttyp -D FAULT_WITH -o \(aoutName) \(tbName) ".sh()
            if iverilogResult != EX_OK {
                exit(Int32(iverilogGMResult))
            }
            let vvpResult = "vvp \(aoutName) > /dev/null".sh()
            if vvpResult != EX_OK {
                exit(Int32(vvpGMResult))
            }

            let difference = "diff \(vcdName) \(vcdGMName) > /dev/null".sh() == 1
            if (difference) {
                finalVector = vector
                break
            } else {
                //print("Vector \(vector) not viable for \(faultPoint) stuck at \(stuckAt)")
            }
        }

        let _ = "rm -rf \(folderName)".sh()

        return finalVector
    }
}